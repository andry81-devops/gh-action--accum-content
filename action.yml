# Tutorial to use with: https://github.com/andry81-devops/accum-content
#

name: accum-content
description: 'GitHub composite action to periodically download and accumulate content into repository'

inputs:
  deps_repo_owner:
    description: 'Owner of a repository used to checkout dependencies'
    required: true

  deps_repo_branch:
    description: 'Repository branch used to checkout dependencies'
    default: master

  deps_repo_read_token:
    description: 'PAT token to a repository used to checkout dependencies'
    default: ${{ github.token }}

  config_repo_owner:
    description: 'Owner of a repository used to read and execute content config file'
    required: true

  config_repo:
    description: 'Repository name used to read and execute content config file'
    required: true

  config_repo_branch:
    description: 'Repository branch used to read and execute content config file'
    default: master

  config_repo_read_token:
    description: 'PAT token used to read content config file repository'
    required: true

  store_repo_owner:
    description: 'Owner of a repository used to store content'
    required: true

  store_repo:
    description: 'Repository name used to store content'
    required: true

  store_repo_branch:
    description: 'Repository branch used to store content'
    default: master

  store_repo_write_token:
    description: 'PAT token to the content store repository with write/push access rights'
    required: true

  commit_msg_entity:
    description: 'Commit message entity'
    # examples:
    # - my-store-dir-1
    # - my-store-dir-2

  content_config_file:
    description: 'Content config file in the content config repository'
    required: true

  content_index_file:
    description: 'Content index file in the content store repository'
    required: true

  content_index_dir:
    description: 'Content index directory in the content store repository. If is not defined, then relative to content_index_file'

  curl_flags:
    description: 'additional curl flags'
    # example:
    #   `-H 'Cache-Control: no-cache'`

  # NOTE:
  #   The `flags` converts into `GH_WORKFLOW_FLAGS` environment variable as a single line string.
  #   You must evaluate it to a shell array to be able to use it in the bash shell: `eval __flags__=($GH_WORKFLOW_FLAGS)`
  #

  flags:
    description: >
      String of flag values list in format of `NAME[=[EXPR]]` ready to be evaluated as a shell array: `(<0> <1> ... <N>)`.
      If `EXPR` is not empty and begins by '[' then, use `eval EXPR` instead of `(( EXPR ))` expression.
      Otherwise if a flag expression is `NAME=`, then false (unflagged).
      Otherwise if a flag expression is `NAME`, then true (flagged).
    # See dependent repositories and scripts for details.
    # Flag expression examples:
    #   # A is true, B is true, C is false, D is true, F is false, T is true.
    #   # GH_WORKFLOW_FLAGS=`A=1 B="1 + 1" C="1 - 1" D='[[ "1" -eq "1" ]]' F= T`
    #   flags: >-
    #     A=1
    #     B="1 + 1"
    #     C="1 - 1"
    #     D='[[ "1" -eq "1" ]]'
    #     F=
    #     T
    # builtin flag names:
    #   ENABLE_PRINT_INITIAL_ENV_INTO_STDOUT=1

  env:
    description: environment variables
    # See dependent repositories and scripts for details.
    # examples:
    #   ENABLE_GENERATE_CHANGELOG_FILE=1
    #   CHANGELOG_FILE=repo/{{REPO_OWNER}}/{{REPO}}/content-changelog.txt
    #   ENABLE_COMMIT_MESSAGE_DATE_WITH_TIME=1            # insert the time string in format HH:MMZ additionally after the date in each commit message
    #   ENABLE_COMMIT_MESSAGE_WITH_WORKFLOW_RUN_NUMBER=1  # insert the workflow run number after date/time prefix in each commit message
    #   ENABLE_YAML_PRINT_AFTER_EDIT=1
    #   ENABLE_YAML_PRINT_AFTER_PATCH=1
    #   ENABLE_YAML_DIFF_PRINT_AFTER_EDIT=1
    #   ENABLE_YAML_DIFF_PRINT_BEFORE_PATCH=1
    #   ENABLE_YAML_PATCH_DIFF_PAUSE_MODE=1
    #   ENABLE_GITHUB_ACTIONS_RUN_URL_PRINT_TO_CHANGELOG=1
    #   ENABLE_REPO_STATS_COMMIT_URL_PRINT_TO_CHANGELOG=1
    #   CONTINUE_ON_INVALID_INPUT=1
    #   CONTINUE_ON_EMPTY_CHANGES=1
    #   ERROR_ON_EMPTY_CHANGES_WITHOUT_ERRORS=1
    #   NO_SKIP_UNEXPIRED_ENTRIES=1
    #   NO_DOWNLOAD_ENTRIES=1
    #   NO_DOWNLOAD_ENTRIES_AND_CREATE_EMPTY_INSTEAD=1
    #   USE_PYTHON3_PIP_INSTALL_CMDLINE="<pip-install-cmdline>"
    #   USE_APT_GET_INSTALL_CMDLINE="<apt-get-install-cmdline>"

runs:
  using: "composite"
  steps:
    - name: load `flags` parameter into `GH_WORKFLOW_FLAGS` environment variable
      shell: bash
      run: |
        # suppress not zero exit code
        { IFS=$' \t' read -r -d '' GH_WORKFLOW_FLAGS || (( 1 )); } <<::EOF::
        ${{ inputs.flags }}
        ::EOF::
        GH_WORKFLOW_FLAGS="${GH_WORKFLOW_FLAGS//[$'\n\r']/}" # remove all line returns
        echo "GH_WORKFLOW_FLAGS=$GH_WORKFLOW_FLAGS" >> $GITHUB_ENV

    - name: print initial environment variables
      shell: bash
      run: |
        eval __flags__=($GH_WORKFLOW_FLAGS)
        for arg in "${__flags__[@]}"; do
          # suppress not zero exit code
          IFS=$'=\n' read -r -d '' name value <<< "$arg" || (( 1 ))
          if [[ "$name" == 'ENABLE_PRINT_INITIAL_ENV_INTO_STDOUT' ]]; then
            # If `value` is not empty and begins by '[' then, use `eval "$value"` instead of `(( value ))` expression.
            # Otherwise if `value` is empty and `arg` with assign character, then false (unflagged).
            # Otherwise if `value` is empty and `arg` without assign character, then true (flagged).
            if [[ -z "$value" && "${arg/=/}" == "$arg" ]] || ( [[ "${value:0:1}" != "[" ]] && (( value )) ) || ( [[ "${value:0:1}" == "[" ]] && eval "$value" ) ; then
              env | sort
              break
            fi
          fi
        done

    - name: install packages with caching
      uses: andry81-forks/cache-apt-pkgs-action@latest
      with:
        packages: xmlstarlet

    # step is required to workaround variable expansion in variables
    - name: declare dependent variables
      shell: bash
      run: |
        echo "GH_WORKFLOW_ROOT=$GITHUB_WORKSPACE/gh-workflow" >> $GITHUB_ENV

    - name: checkout gh-workflow@${{ inputs.deps_repo_branch }}
      uses: andry81-devops/gh-action--git-checkout@master
      with:
        repository: ${{ inputs.deps_repo_owner }}/gh-workflow
        ref:        ${{ inputs.deps_repo_branch }}
        path:       gh-workflow
        token:      ${{ inputs.deps_repo_read_token }}

        mkdir-p: >-
          ${{ env.GH_WORKFLOW_ROOT }}

    - name: update permissions
      shell: bash
      run: |
        chmod ug+x $GH_WORKFLOW_ROOT/bash/_common/update-permissions.sh
        $GH_WORKFLOW_ROOT/bash/_common/update-permissions.sh ug+x "$GH_WORKFLOW_ROOT/bash" -iname '*.sh'

    # step is required to pass environment variables externally
    - name: declare variables from lists
      shell: bash
      run: |
        # suppress not zero exit code
        { IFS=$' \t' read -r -d '' INPUT_ENV || (( 1 )); } <<::EOF::
        ${{ inputs.env }}
        ::EOF::
        INPUT_ENV="${INPUT_ENV//[$'\n\r']/}" # remove all line returns
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          ${INPUT_ENV} \
          "GHWF_GITHUB_ACTIONS_RUN_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

    - name: install apt-get prerequisites
      shell: bash
      run: |
        if [[ -n "$USE_APT_GET_INSTALL_CMDLINE" ]]; then
          function call()
          {
            echo ">$@"
            "$@"
          }
          
          while IFS=$'\n' read -r line; do
            call sudo apt-get install $line
            echo '---'
          done <<< "$USE_APT_GET_INSTALL_CMDLINE"
        fi

    - name: install python prerequisites
      shell: bash
      run: |
        if [[ -n "$USE_PYTHON3_PIP_INSTALL_CMDLINE" ]]; then
          function call()
          {
            echo ">$@"
            "$@"
          }
          
          while IFS=$'\n' read -r line; do
            python3 -m pip install $line
            echo '---'
          done <<< "$USE_PYTHON3_PIP_INSTALL_CMDLINE"
        fi

    - name: variables validation
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "CHANGELOG_FILE=${CHANGELOG_FILE:-"changelog.txt"}"
        if (( ! NO_SKIP_UNEXPIRED_ENTRIES )) && [[ "${{ github.event.inputs.no_skip_unexpired_entries }}" == 'true' || "${{ github.event.inputs.no_skip_unexpired_entries }}" -ne 0 ]]; then
          $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
            "NO_SKIP_UNEXPIRED_ENTRIES=1"
        fi
        if (( ! NO_DOWNLOAD_ENTRIES )) && [[ "${{ github.event.inputs.no_download_entries }}" == 'true' || "${{ github.event.inputs.no_download_entries }}" -ne 0 ]]; then
          $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
            "NO_DOWNLOAD_ENTRIES=1"
        fi

    - name: declare local variables
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "changelog_file=$CHANGELOG_FILE" \
          "CHANGELOG_FILE=$GITHUB_WORKSPACE/content-cache/$CHANGELOG_FILE" \
          "commit_msg_entity=${{ inputs.commit_msg_entity }}" \
          "content_config_file=$GITHUB_WORKSPACE/content-config/${{ inputs.content_config_file }}" \
          "content_index_file=$GITHUB_WORKSPACE/content-cache/${{ inputs.content_index_file }}" \
          "content_index_dir=${{ inputs.content_index_dir }}" \
          "curl_flags=${{ inputs.curl_flags }}"

    - name: declare local variables
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "content_config_dir=${content_config_file%/*}" \
          "content_index_file_dir=${content_index_file%/*}" \
          "changelog_dir=${CHANGELOG_FILE%/*}"

    - name: head annotations
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/print-notice.sh \
          "content config file: https://github.com/${{ inputs.config_repo_owner }}/${{ inputs.config_repo }}/tree/${{ inputs.config_repo_branch }}/${{ inputs.content_config_file }}" \
          "content index file: https://github.com/${{ inputs.store_repo_owner }}/${{ inputs.store_repo }}/tree/${{ inputs.store_repo_branch }}/${{ inputs.content_index_file }}" \
          "content index dir: ${{ inputs.content_index_dir }}"
        $GH_WORKFLOW_ROOT/bash/github/print-notice-ln.sh \
          "content changelog file: https://github.com/${{ inputs.store_repo_owner }}/${{ inputs.store_repo }}/tree/${{ inputs.store_repo_branch }}/$changelog_file" \
          "env:"$'\n'"  GITHUB_RUN_ID=\`$GITHUB_RUN_ID\`"$'\n'"  GITHUB_RUN_NUMBER=\`$GITHUB_RUN_NUMBER\`"

    - name: checkout content-config@${{ inputs.config_repo_branch }}
      uses: andry81-devops/gh-action--git-checkout@master
      with:
        repository: ${{ inputs.config_repo_owner }}/${{ inputs.config_repo }}
        ref:        ${{ inputs.config_repo_branch }}
        path:       content-config
        token:      ${{ inputs.config_repo_read_token }}

        mkdir-p: >-
          ${{ env.content_config_dir }}

    - name: checkout content-cache@${{ inputs.store_repo_branch }}
      uses: andry81-devops/gh-action--git-checkout@master
      with:
        repository: ${{ inputs.store_repo_owner }}/${{ inputs.store_repo }}
        ref:        ${{ inputs.store_repo_branch }}
        path:       content-cache
        token:      ${{ inputs.store_repo_write_token }}

        mkdir-p: >-
          ${{ env.content_index_file_dir }}
          ${{ env.content_index_dir }}
          ${{ env.changelog_dir }}

    - name: 'accumulate content using `${{ inputs.config_repo_dir }}/${{ inputs.config_repo_file }}` config'
      id: accum-content
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/content-cache
        $GH_WORKFLOW_ROOT/bash/cache/accum-content.sh
        # caution: no operation after that line if non zero exit code happens above

    - name: commit content-cache
      shell: bash
      run: |
        cd $GITHUB_WORKSPACE/content-cache
        git add .
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        COMMIT_MESSAGE="A/U: $COMMIT_MESSAGE_DATE_TIME_PREFIX:"
        if (( ENABLE_COMMIT_MESSAGE_WITH_WORKFLOW_RUN_NUMBER )) && [[ -n "$GITHUB_RUN_NUMBER" ]]; then
          COMMIT_MESSAGE="$COMMIT_MESSAGE #$GITHUB_RUN_NUMBER:"
        fi
        COMMIT_MESSAGE="$COMMIT_MESSAGE ${COMMIT_MESSAGE_PREFIX}${COMMIT_MESSAGE_SUFFIX:+" | "}$COMMIT_MESSAGE_SUFFIX"
        git commit -m "$COMMIT_MESSAGE"
        $GH_WORKFLOW_ROOT/bash/github/set-env-from-args.sh \
          "HEAD_COMMIT_HASH=$(git rev-parse HEAD)"

    - name: push board-stats
      uses: ad-m/github-push-action@master
      with:
        repository:   ${{ inputs.store_repo_owner }}/${{ inputs.store_repo }}
        branch:       ${{ inputs.store_repo_branch }}
        directory:    content-cache
        github_token: ${{ inputs.store_repo_write_token }}

    - name: print commit parameters
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/print-notice.sh \
          "commit reference url: https://github.com/${{ inputs.store_repo_owner }}/${{ inputs.store_repo }}/commit/$HEAD_COMMIT_HASH"

    - name: flush print annotations
      if: always()
      shell: bash
      run: |
        $GH_WORKFLOW_ROOT/bash/github/flush-print-annotations.sh
